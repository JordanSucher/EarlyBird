generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String    @unique
  password      String?
  createdAt     DateTime  @default(now())
  
  accounts Account[]
  sessions Session[]
  songs    Song[]
}

model Song {
  id          String   @id @default(cuid())
  title       String
  fileName    String
  fileUrl     String
  fileSize    Int
  duration    Int?     // in seconds
  mimeType    String
  uploadedAt  DateTime @default(now())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  tags        SongTag[]
  
  @@index([userId])
  @@index([uploadedAt])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  songs SongTag[]
}

model SongTag {
  songId String
  tagId  String
  
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([songId, tagId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
